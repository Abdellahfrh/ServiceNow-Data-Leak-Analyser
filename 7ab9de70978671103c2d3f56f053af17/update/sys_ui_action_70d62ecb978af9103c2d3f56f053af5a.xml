<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name/>
        <active>true</active>
        <client>false</client>
        <client_script_v2><![CDATA[function onClick(g_form) {

}]]></client_script_v2>
        <comments/>
        <condition>current.canWrite()</condition>
        <form_action>true</form_action>
        <form_button>false</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>true</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <format_for_configurable_workspace>false</format_for_configurable_workspace>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <messages/>
        <name>Open Leaked Records</name>
        <onclick/>
        <order>100</order>
        <script><![CDATA[/* global current, action, gs, GlideSysAttachment */
/* eslint no-undef: "error" */
(function (historicAclGr, action) {
	
	if (historicAclGr.leaked_records) {
		const gse = new GlideSysAttachment();
		const attGr = gse.getAttachments('x_376096_dla_historic_acl', historicAclGr.sys_id);

		let sysIDs = [];
		while (attGr.next()) {
			if (attGr.file_name.toString().startsWith('leaked_')) {
				const content = gse.getContent(attGr);
				if (content) {
					sysIDs = sysIDs.concat(content.split(','));
				}

				if (sysIDs.length > 1000) {
					gs.addErrorMessage('Too many records to show, please download the attachments and manually built the query');
					action.setRedirectURL(historicAclGr);
					return;
				}
			}
		}
		
		// no attachments
		if (sysIDs.length == 0) {
			if (historicAclGr.condition) {
				action.setRedirectURL(historicAclGr.leak_result.table + '_list.do?sysparm_query=' + historicAclGr.condition);
				return;
			}
		}
		
		gs.addInfoMessage('Unexpected Condition. Please notify supplier of this app.');
	} else if (historicAclGr.leaked_records == 0) {
		gs.addInfoMessage('This ACL did not leak any records!');
	} else {
		gs.addErrorMessage('Access not yet analyzed!');
	}
	
	action.setRedirectURL(historicAclGr.leak_result.getRefRecord());
	
})(current, action);]]></script>
        <show_insert>false</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-27 14:27:59</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>70d62ecb978af9103c2d3f56f053af5a</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Open Leaked Records</sys_name>
        <sys_overrides/>
        <sys_package display_value="Data Leak Analyser" source="x_376096_dla">7ab9de70978671103c2d3f56f053af17</sys_package>
        <sys_policy/>
        <sys_scope display_value="Data Leak Analyser">7ab9de70978671103c2d3f56f053af17</sys_scope>
        <sys_update_name>sys_ui_action_70d62ecb978af9103c2d3f56f053af5a</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-27 14:41:59</sys_updated_on>
        <table>x_376096_dla_historic_acl</table>
        <ui11_compatible>true</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>
