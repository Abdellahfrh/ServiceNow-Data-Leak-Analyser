<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_vtable">
    <sys_script_vtable action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>false</advanced>
        <cache_isolation_level>USER</cache_isolation_level>
        <cache_strategy>CACHE_BY_QUERY</cache_strategy>
        <cache_ttl>0</cache_ttl>
        <name>DLA - Potential Data Leak Table</name>
        <script><![CDATA[/* global x_376096_dla, v_table, v_query, GlideRecord */
/* eslint no-undef: "error" */
(function executeQuery(v_table, v_query) {
    // Main API:
    //    v_table.addRow({ ... }) - adds a row to the result set
    
    // There are also query helper methods
    //    v_query.getEncodedQuery() - returns encoded querystring
    //    v_query.getCondition(field) - returns encoded querystring for the given field (includes field name, operator, and value)
    //    v_query.getParameter(field) - returns parameter for the given field (only includes value for equality conditions)
    //    v_query.isGet() - returns whether the query is a single get by sys_id
    //    v_query.getSysId() - returns parameter for sys_id field
    //    v_query.isTextSearch() - returns whether the query contains a text query parameter
    //    v_query.getTextSearch() - returns text search query parameter (internal field name 123TEXTQUERY321)
    //    v_query.getFirstRowWanted() - returns the first row to include
    //    v_query.getLastRowWanted() - returns the last row to include
  
    // Note: You must define sys_id for each row so that forms and lists for this table work properly
     
    // Your code goes here
    // v_table.addRow({...})

	const affectedTables = new x_376096_dla.DLAUtil().getAffectedTables();
	affectedTables.breached.forEach(breach => {
		let widgetSysID;
		const widgetGr = new GlideRecord('sp_widget');
		widgetGr.addQuery('id', breach.widget)
			.addOrCondition('sys_id', breach.widget);
		widgetGr.setLimit(1);
		widgetGr.query();
		if (widgetGr.next()) {
			widgetSysID = widgetGr.getUniqueValue();
		}

		v_table.addRow({
			widget: widgetSysID,
			table: breach.table,
			transaction: breach.transaction,
			notes: breach.reason,
			probability: breach.prob
		});
	});

  })(v_table, v_query);]]></script>
        <sys_class_name>sys_script_vtable</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-10-20 22:00:54</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>921e08c9978e71103c2d3f56f053afb2</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>DLA - Potential Data Leak Table</sys_name>
        <sys_package display_value="Data Leak Analyser" source="x_376096_dla">7ab9de70978671103c2d3f56f053af17</sys_package>
        <sys_policy/>
        <sys_scope display_value="Data Leak Analyser">7ab9de70978671103c2d3f56f053af17</sys_scope>
        <sys_update_name>sys_script_vtable_921e08c9978e71103c2d3f56f053afb2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-10-20 22:03:26</sys_updated_on>
        <table>x_376096_dla_st_pot_data_leak</table>
    </sys_script_vtable>
</record_update>
